apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: monitoring
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  
  source:
    repoURL: https://prometheus-community.github.io/helm-charts
    chart: kube-prometheus-stack
    targetRevision: 65.7.0
    helm:
      valuesObject:
        # Default Rules
        defaultRules:
          create: true
          rules:
            alertmanager: true
            etcd: false
            general: true
            k8s: true
            kubeApiserver: false
            kubeApiserverAvailability: true
            kubePrometheusGeneral: true
            kubePrometheusNodeRecording: true
            kubernetesApps: true
            kubernetesResources: true
            kubernetesStorage: true
            kubernetesSystem: true
            kubeScheduler: false
            kubeProxy: false
            network: true
            node: true
            prometheus: true
            prometheusOperator: true

        # Alertmanager
        alertmanager:
          enabled: true
          alertmanagerSpec:
            replicas: 1
            retention: 120h
            storage:
              volumeClaimTemplate:
                spec:
                  accessModes: ["ReadWriteOnce"]
                  storageClassName: local-path
                  resources:
                    requests:
                      storage: 5Gi
            resources:
              requests:
                memory: 64Mi
                cpu: 50m
              limits:
                memory: 256Mi
                cpu: 200m
          config:
            global:
              resolve_timeout: 5m
            route:
              group_by: ['alertname', 'cluster', 'service']
              group_wait: 10s
              group_interval: 10s
              repeat_interval: 12h
              receiver: 'discord'
              routes:
              - receiver: 'discord'
                matchers:
                  - severity=~"warning|critical"
            receivers:
            - name: 'discord'
              webhook_configs:
              - url: 'http://alertmanager-discord:9094'
                send_resolved: true

        # Grafana
        grafana:
          enabled: true
          replicas: 1
          admin:
            existingSecret: grafana-admin
            userKey: admin-user
            passwordKey: admin-password
          persistence:
            enabled: true
            storageClassName: local-path
            size: 5Gi
          resources:
            requests:
              memory: 128Mi
              cpu: 100m
            limits:
              memory: 512Mi
              cpu: 500m
          ingress:
            enabled: false
          dashboardProviders:
            dashboardproviders.yaml:
              apiVersion: 1
              providers:
              - name: 'default'
                orgId: 1
                folder: ''
                type: file
                disableDeletion: false
                editable: true
                options:
                  path: /var/lib/grafana/dashboards/default
          plugins:
            - grafana-piechart-panel
            - grafana-worldmap-panel
          env:
            GF_SERVER_ROOT_URL: https://grafana.feto.dev
            GF_SERVER_DOMAIN: grafana.feto.dev

        # Prometheus
        prometheus:
          enabled: true
          prometheusSpec:
            replicas: 1
            retention: 15d
            retentionSize: "8GB"
            storageSpec:
              volumeClaimTemplate:
                spec:
                  accessModes: ["ReadWriteOnce"]
                  storageClassName: local-path
                  resources:
                    requests:
                      storage: 10Gi
            resources:
              requests:
                memory: 512Mi
                cpu: 250m
              limits:
                memory: 2Gi
                cpu: 1000m
            serviceMonitorSelector: {}
            serviceMonitorNamespaceSelector: {}
            podMonitorSelector: {}
            podMonitorNamespaceSelector: {}
            additionalScrapeConfigs:
            - job_name: 'traefik'
              kubernetes_sd_configs:
              - role: pod
                namespaces:
                  names:
                  - kube-system
              relabel_configs:
              - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
                regex: traefik
                action: keep
              - source_labels: [__meta_kubernetes_pod_container_port_name]
                regex: metrics
                action: keep

        # Prometheus Operator
        prometheusOperator:
          enabled: true
          resources:
            requests:
              memory: 64Mi
              cpu: 50m
            limits:
              memory: 256Mi
              cpu: 200m

        # Node Exporter
        nodeExporter:
          enabled: true
          resources:
            requests:
              memory: 32Mi
              cpu: 25m
            limits:
              memory: 64Mi
              cpu: 100m

        # Kube State Metrics
        kube-state-metrics:
          enabled: true
          resources:
            requests:
              memory: 64Mi
              cpu: 50m
            limits:
              memory: 128Mi
              cpu: 200m

        # Disable K3s-managed components
        kubeEtcd:
          enabled: false
        kubeControllerManager:
          enabled: false
        kubeScheduler:
          enabled: false
  
  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m