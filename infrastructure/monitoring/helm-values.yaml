# kube-prometheus-stack Helm Values
# Chart: prometheus-community/kube-prometheus-stack

# Global Config
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: false  # Nicht in K3s
    general: true
    k8s: true
    kubeApiserver: false  # K3s managed
    kubeApiserverAvailability: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: false  # K3s managed
    network: true
    node: true
    prometheus: true
    prometheusOperator: true

# Alertmanager Config
alertmanager:
  enabled: true
  alertmanagerSpec:
    replicas: 1
    retention: 120h
    storage:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          storageClassName: local-path
          resources:
            requests:
              storage: 5Gi
    resources:
      requests:
        memory: 64Mi
        cpu: 50m
      limits:
        memory: 256Mi
        cpu: 200m

# Discord Webhook Config (defined below)
  config:
    global:
      resolve_timeout: 5m
    
    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 12h
      receiver: 'discord'
      routes:
      - receiver: 'discord'
        matchers:
          - severity=~"warning|critical"
    
    receivers:
    - name: 'discord'
      webhook_configs:
      - url: 'http://alertmanager-discord:9094'
        send_resolved: true

# Grafana Konfiguration
grafana:
  enabled: true
  replicas: 1
  
  admin:
    existingSecret: grafana-admin
    userKey: admin-user
    passwordKey: admin-password
  
  persistence:
    enabled: true
    storageClassName: local-path
    size: 5Gi
  
  resources:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 512Mi
      cpu: 500m
  
  # Ingress wird separat definiert (Traefik IngressRoute)
  ingress:
    enabled: false
  
  # Grafana Dashboard Providers
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default
  
  # Pre-installed Dashboards
  dashboardsConfigMaps:
    default: grafana-dashboards
  
  # Grafana Plugins
  plugins:
    - grafana-piechart-panel
    - grafana-worldmap-panel
  
  # Grafana Environment
  env:
    GF_SERVER_ROOT_URL: https://grafana.feto.dev
    GF_SERVER_DOMAIN: grafana.feto.dev

# Prometheus Konfiguration
prometheus:
  enabled: true
  prometheusSpec:
    replicas: 1
    retention: 15d
    retentionSize: "8GB"
    
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          storageClassName: local-path
          resources:
            requests:
              storage: 10Gi
    
    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 2Gi
        cpu: 1000m
    
    # ServiceMonitor Selector (sammelt Metriken von allen Apps)
    serviceMonitorSelector: {}
    serviceMonitorNamespaceSelector: {}
    podMonitorSelector: {}
    podMonitorNamespaceSelector: {}
    
    # Zus√§tzliche Scrape Configs
    additionalScrapeConfigs:
    # Traefik Metrics (falls nicht auto-discovered)
    - job_name: 'traefik'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - kube-system
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
        regex: traefik
        action: keep
      - source_labels: [__meta_kubernetes_pod_container_port_name]
        regex: metrics
        action: keep

# Prometheus Operator
prometheusOperator:
  enabled: true
  resources:
    requests:
      memory: 64Mi
      cpu: 50m
    limits:
      memory: 256Mi
      cpu: 200m

# Node Exporter (Host Metriken)
nodeExporter:
  enabled: true
  resources:
    requests:
      memory: 32Mi
      cpu: 25m
    limits:
      memory: 64Mi
      cpu: 100m

# Kube State Metrics (K8s Resource Metriken)
kube-state-metrics:
  enabled: true
  resources:
    requests:
      memory: 64Mi
      cpu: 50m
    limits:
      memory: 128Mi
      cpu: 200m

# Disable etcd metrics (K3s doesn't expose them)
kubeEtcd:
  enabled: false

# Disable kube-controller-manager metrics (K3s managed)
kubeControllerManager:
  enabled: false

# Disable kube-scheduler metrics (K3s managed)
kubeScheduler:
  enabled: false
  